{"version":3,"sources":["assets/EatSound.ogg","actions/types.js","helpers/index.js","components/App.js","actions/index.js","reducers/index.js","reducers/gameReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","KEY_LEFT","KEY_UP","KEY_RIGHT","KEY_DOWN","KEY_ENTER","GRID_SIZE","GAME_SPEED","UP","x","y","DOWN","LEFT","RIGHT","INITIAL_STATE","grid","size","row","cols","col","push","createGrid","apple","Math","floor","random","snake","head","velocity","tail","gameOver","App","eatAudio","Audio","EatSound","componentDidMount","_this","start","playEatAudio","play","props","reset","state","document","addEventListener","e","moveSnake","setTimeout","gameLoop","newHead","updateSnakeHead","moveOnEdge","newTail","concat","Object","toConsumableArray","snakeEatsApple","then","console","log","catch","newApple","getRandomApple","createApple","pop","updateSnakeTail","isTail","setGameOver","flag","isOffEdge","emptyCells","forEach","cell","isHead","length","_this$props","isApple","find","inTail","event","keyCode","updateSnakeVelocity","newVelocity","renderGrid","_this$props2","react_default","a","createElement","className","style","gridTemplateColumns","gridTemplateRows","map","key","width","height","renderGameOver","onClick","this","Component","connect","game","type","payload","combineReducers","arguments","undefined","action","objectSpread","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","react_redux_es","components_App","getElementById"],"mappings":"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","file":"static/js/main.d1c8089c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/EatSound.1aae80ce.ogg\";","import { createGrid } from '../helpers'\r\n\r\nexport const RESET = 'RESET'\r\nexport const CREATE_APPLE = 'CREATE_APPLE'\r\nexport const UPDATE_HEAD = 'UPDATE_HEAD'\r\nexport const UPDATE_TAIL = 'UPDATE_TAIL'\r\nexport const UPDATE_VELOCITY = 'UPDATE_VELOCITY'\r\nexport const GAME_OVER = 'GAME_OVER'\r\n\r\nexport const KEY_LEFT = 37\r\nexport const KEY_UP = 38\r\nexport const KEY_RIGHT = 39\r\nexport const KEY_DOWN = 40\r\nexport const KEY_ENTER = 13\r\n\r\n// change size to make grid big or small\r\nexport const GRID_SIZE = 20\r\nexport const GAME_SPEED = 100\r\n\r\nexport const UP = {\r\n    x: 0,\r\n    y: -1,\r\n}\r\nexport const DOWN = {\r\n    x: 0,\r\n    y: 1,\r\n}\r\nexport const LEFT = {\r\n    x: -1,\r\n    y: 0,\r\n}\r\nexport const RIGHT = {\r\n    x: 1,\r\n    y: 0,\r\n}\r\n\r\nexport const INITIAL_STATE = {\r\n    grid: createGrid(GRID_SIZE),\r\n    apple: {\r\n        row: Math.floor(Math.random() * GRID_SIZE),\r\n        col: Math.floor(Math.random() * GRID_SIZE),\r\n    },\r\n    snake: {\r\n        head: {\r\n            row: 9,\r\n            col: 9\r\n        },\r\n        velocity: {\r\n            x: 1,\r\n            y: 0\r\n        },\r\n        tail: [\r\n            {\r\n                row: 9,\r\n                col: 8\r\n            },            \r\n            {\r\n                row: 9,\r\n                col: 7\r\n            }\r\n        ],\r\n    },\r\n    \r\n    gameOver: false\r\n}","export const createGrid = (size) =>{\r\n    const grid = []\r\n\r\n    for (let row = 0; row < size; row++) {\r\n        const cols = [];\r\n        for (let col = 0; col < size; col++) {\r\n            cols.push({\r\n            row,\r\n            col\r\n            });\r\n        }\r\n        grid.push(cols);\r\n    }\r\n    return grid\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    reset, \r\n    setGameOver,\r\n    createApple,\r\n    updateSnakeTail, \r\n    updateSnakeHead, \r\n    updateSnakeVelocity} from '../actions'\r\nimport {\r\n    GRID_SIZE,\r\n    GAME_SPEED,\r\n    INITIAL_STATE,\r\n    UP, DOWN, LEFT, RIGHT, \r\n    KEY_DOWN, KEY_LEFT, KEY_RIGHT, KEY_UP, KEY_ENTER} from '../actions/types';\r\n\r\nimport './style.css'\r\nimport EatSound from '../assets/EatSound.ogg'\r\n\r\nclass App extends Component {\r\n    \r\n    eatAudio = new Audio(EatSound)\r\n\r\n    componentDidMount = () =>{ \r\n        this.start()\r\n    }\r\n    playEatAudio = () =>{\r\n        return this.eatAudio.play()\r\n    }\r\n    start = () =>{\r\n        this.props.reset({\r\n            state: INITIAL_STATE\r\n        })\r\n        document.addEventListener('keydown', (e) => {\r\n            this.moveSnake(e)\r\n        });\r\n        setTimeout(() => {\r\n            this.gameLoop()\r\n        }, GAME_SPEED)\r\n    }\r\n\r\n    gameLoop = () =>{\r\n        \r\n        //if game is over exit game loop\r\n        if (this.props.gameOver) \r\n            return;\r\n        \r\n        //extracting data from props to change state\r\n        const {snake} = this.props\r\n\r\n        // updating head\r\n        const newHead = {\r\n            row: snake.head.row + snake.velocity.y,\r\n            col: snake.head.col + snake.velocity.x\r\n        }\r\n        this.props.updateSnakeHead({\r\n            newHead\r\n        })\r\n        \r\n         //move over condition\r\n        this.moveOnEdge()\r\n\r\n        // updating apple and tail\r\n        let newTail = [snake.head, ...snake.tail]\r\n        const isEat = this.snakeEatsApple()\r\n\r\n        if(isEat){            \r\n            this.playEatAudio().then(() =>{\r\n                console.log('play')\r\n            }).catch((e)=>{\r\n                console.log(e)\r\n            })\r\n            const newApple = this.getRandomApple()\r\n            this.props.createApple({\r\n                newApple\r\n            })\r\n        }else{\r\n            newTail.pop()\r\n        }        \r\n        this.props.updateSnakeTail({\r\n            newTail\r\n        })\r\n\r\n        //game over condition\r\n        if(this.isTail(this.props.snake.head)){\r\n            this.props.setGameOver({\r\n                flag: true\r\n            })\r\n        }\r\n\r\n        //restart loop after defined time\r\n        setTimeout(() => {\r\n            this.gameLoop()\r\n        }, GAME_SPEED)\r\n    }\r\n\r\n    moveOnEdge = () =>{\r\n        const {snake} = this.props\r\n        if(this.isOffEdge(snake.head)){\r\n            if(snake.head.col>GRID_SIZE-1){\r\n                const newHead = {\r\n                    row: snake.head.row,\r\n                    col: 0\r\n                }                \r\n                this.props.updateSnakeHead({\r\n                    newHead\r\n                })\r\n            }\r\n            else if(snake.head.col<0){\r\n                const newHead = {\r\n                    row: snake.head.row,\r\n                    col: GRID_SIZE-1\r\n                }                \r\n                this.props.updateSnakeHead({\r\n                    newHead\r\n                })\r\n            }\r\n            else if(snake.head.row<0){\r\n                const newHead = {\r\n                    row: GRID_SIZE-1,\r\n                    col: snake.head.col\r\n                }                \r\n                this.props.updateSnakeHead({\r\n                    newHead\r\n                })\r\n            }else if(snake.head.row>GRID_SIZE-1){\r\n                const newHead = {\r\n                    row: 0,\r\n                    col: snake.head.col\r\n                }                \r\n                this.props.updateSnakeHead({\r\n                    newHead\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    getRandomApple = () =>{\r\n        const { grid } = this.props;\r\n        const emptyCells = []\r\n        grid.forEach((row) =>{\r\n            row.forEach((cell) =>{\r\n                if(!(this.isTail(cell) || this.isHead(cell))){\r\n                    emptyCells.push(cell)\r\n                }\r\n            })\r\n        })\r\n        return emptyCells[Math.floor(Math.random()*emptyCells.length)]\r\n    }\r\n\r\n    snakeEatsApple = () => {\r\n        \r\n        const { apple, snake } = this.props;\r\n        \r\n        return apple.row === snake.head.row\r\n            && apple.col === snake.head.col;\r\n    }\r\n\r\n    isOffEdge = () => {\r\n        const { snake } = this.props;    \r\n        if (snake.head.col > GRID_SIZE-1\r\n            || snake.head.col < 0\r\n            || snake.head.row > GRID_SIZE-1\r\n            || snake.head.row < 0) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    isHead = (cell) => {\r\n        const { snake } = this.props;\r\n        return snake.head.row === cell.row\r\n            && snake.head.col === cell.col;\r\n    }\r\n\r\n    isApple = (cell) =>{\r\n        const {apple} = this.props\r\n        return apple.row === cell.row\r\n            && apple.col === cell.col;\r\n    }\r\n\r\n    isTail = (cell) =>{        \r\n        const {tail} = this.props.snake\r\n        return tail.find((inTail) => {\r\n            return inTail.row === cell.row && inTail.col === cell.col\r\n        })\r\n    }\r\n\r\n    moveSnake = (event) => {\r\n        const {snake} = this.props\r\n        switch(event.keyCode){\r\n            case KEY_UP:\r\n                if(snake.velocity === UP || snake.velocity === DOWN)\r\n                    return\r\n                this.props.updateSnakeVelocity({                    \r\n                    newVelocity: UP\r\n                })\r\n                return\r\n            case KEY_LEFT:\r\n                if(snake.velocity === LEFT || snake.velocity === RIGHT)\r\n                    return\r\n                this.props.updateSnakeVelocity({                    \r\n                    newVelocity: LEFT\r\n                })\r\n                return\r\n            case KEY_DOWN:\r\n                if(snake.velocity === UP || snake.velocity === DOWN)\r\n                    return\r\n                this.props.updateSnakeVelocity({                    \r\n                    newVelocity: DOWN\r\n                })\r\n                return\r\n            case KEY_RIGHT:\r\n                if(snake.velocity === LEFT || snake.velocity === RIGHT)\r\n                    return\r\n                this.props.updateSnakeVelocity({                    \r\n                    newVelocity: RIGHT\r\n                })\r\n                return\r\n            case KEY_ENTER:\r\n                if(this.props.gameOver)\r\n                    this.start()\r\n                return\r\n            default:\r\n                return\r\n        }\r\n    }\r\n    \r\n    renderGrid = () =>{        \r\n        const { grid, snake } = this.props;\r\n        \r\n        return(\r\n            <div className=\"center\">\r\n                <h3 className=\"score\">Score: {snake.tail.length-2}</h3>\r\n                <section \r\n                    className=\"grid\"\r\n                    style={{\r\n                        gridTemplateColumns: `repeat(${GRID_SIZE}, 1fr)`, \r\n                        gridTemplateRows: `repeat(${GRID_SIZE}, 1fr)`\r\n                    }}>\r\n                {\r\n                    grid.map((row) => (\r\n                        row.map(cell => (\r\n                        <div key={`${cell.row} ${cell.col}`} \r\n                            style={{ width: `${800/GRID_SIZE}`, height: `${800/GRID_SIZE}`}}\r\n                            className={`cell ${this.isHead(cell)\r\n                            ? 'head' : this.isApple(cell)\r\n                            ? 'apple' : this.isTail(cell)\r\n                            ? 'tail' : ''}`\r\n                            }>\r\n                        </div>\r\n                        ))\r\n                    ))\r\n                }\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderGameOver = () =>{\r\n        return(\r\n            <div className=\"card text-center\">\r\n                <div className=\"card-body\">\r\n                    <h1 className=\"card-title\">You bit yourself!!</h1>\r\n                    <p className=\"card-text\">Your Score is: {this.props.snake.tail.length-2}</p>\r\n                    <button className=\"btn btn-primary\" onClick={this.start}>\r\n                        Restart\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"App\">\r\n            { this.props.gameOver? this.renderGameOver() : this.renderGrid()}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        grid: state.game.grid,\r\n        apple: state.game.apple,\r\n        snake: state.game.snake,\r\n        gameOver: state.game.gameOver\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps, {\r\n        reset,\r\n        createApple,\r\n        setGameOver,\r\n        updateSnakeTail, \r\n        updateSnakeHead, \r\n        updateSnakeVelocity\r\n    }\r\n    )(App);","\r\nimport {\r\n    UPDATE_HEAD,\r\n    UPDATE_TAIL,\r\n    UPDATE_VELOCITY,\r\n    CREATE_APPLE,\r\n    RESET,\r\n    GAME_OVER\r\n} from './types'\r\n\r\nexport const reset = (state) => {\r\n    return({\r\n        type: RESET,\r\n        payload: state\r\n    })\r\n}\r\n\r\nexport const setGameOver = (flag) => {\r\n    return({\r\n        type: GAME_OVER,\r\n        payload: flag\r\n\r\n    })\r\n}\r\n\r\nexport const createApple = (apple) =>{\r\n    return({\r\n        type: CREATE_APPLE,\r\n        payload: apple\r\n    })\r\n}\r\nexport const updateSnakeHead = (head) =>{\r\n    return({\r\n        type: UPDATE_HEAD,\r\n        payload: head\r\n    })\r\n}\r\nexport const updateSnakeTail = (tail) =>{\r\n    return({\r\n        type: UPDATE_TAIL,\r\n        payload: tail\r\n    })\r\n}\r\nexport const updateSnakeVelocity = (velocity) =>{\r\n    return({\r\n        type: UPDATE_VELOCITY,\r\n        payload: velocity\r\n    })\r\n}\r\n\r\n","import { combineReducers } from 'redux';\r\n\r\nimport gameReducer from './gameReducer';\r\n\r\nexport default combineReducers({\r\n    game: gameReducer\r\n})\r\n","import {\r\n    RESET,\r\n    GAME_OVER,\r\n    UPDATE_TAIL,\r\n    UPDATE_HEAD,\r\n    CREATE_APPLE,\r\n    INITIAL_STATE,\r\n    UPDATE_VELOCITY\r\n} from '../actions/types'\r\n\r\nexport default (state = INITIAL_STATE, action) =>{\r\n    switch(action.type){\r\n        case RESET:\r\n            return {...action.payload.state}\r\n        case GAME_OVER:\r\n            return {...state, gameOver: action.payload.flag}\r\n        case CREATE_APPLE:\r\n            return {...state, apple: action.payload.newApple}\r\n        case UPDATE_HEAD:\r\n            return {...state, snake: {...state.snake, head: action.payload.newHead}}\r\n        case UPDATE_TAIL:\r\n            return {...state, snake: {...state.snake, tail: action.payload.newTail}}\r\n        case UPDATE_VELOCITY:\r\n            return {...state, snake: {...state.snake, velocity: action.payload.newVelocity}}\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reduxThunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware , compose } from 'redux';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(reduxThunk)));\n\nReactDOM.render(\n<Provider store={store}>\n    <App/>\n</Provider>, document.getElementById('root'));"],"sourceRoot":""}