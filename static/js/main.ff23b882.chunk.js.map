{"version":3,"sources":["actions/types.js","helpers/index.js","components/App.js","actions/index.js","reducers/index.js","reducers/gameReducer.js","index.js"],"names":["KEY_LEFT","KEY_UP","KEY_RIGHT","KEY_DOWN","GAME_SPEED","UP","x","y","DOWN","LEFT","RIGHT","INITIAL_STATE","grid","size","row","cols","col","push","createGrid","apple","Math","floor","random","snake","head","velocity","tail","gameOver","App","componentDidMount","_this","start","props","reset","state","document","addEventListener","e","moveSnake","setTimeout","gameLoop","_this$props","isEat","snakeEatsApple","newHead","newTail","concat","Object","toConsumableArray","newApple","getRandomApple","createApple","pop","updateSnakeHead","updateSnakeTail","isOffEdge","isTail","setGameOver","flag","emptyCells","forEach","cell","isHead","length","_this$props2","isApple","find","inTail","event","keyCode","updateSnakeVelocity","newVelocity","renderGrid","_this$props3","react_default","a","createElement","className","map","key","renderGameOver","onClick","this","Component","connect","game","type","payload","combineReducers","arguments","undefined","action","objectSpread","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","react_redux_es","components_App","getElementById"],"mappings":"oQASaA,EAAW,GACXC,EAAS,GACTC,EAAY,GACZC,EAAW,GAEXC,EAAa,IAEbC,EAAK,CACdC,EAAG,EACHC,GAAI,GAEKC,EAAO,CAChBF,EAAG,EACHC,EAAG,GAEME,EAAO,CAChBH,GAAI,EACJC,EAAG,GAEMG,EAAQ,CACjBJ,EAAG,EACHC,EAAG,GAGMI,EAAgB,CACzBC,KClCsB,SAACC,GAGvB,IAFA,IAAMD,EAAO,GAEJE,EAAM,EAAGA,EAAMD,EAAMC,IAAO,CAEjC,IADA,IAAMC,EAAO,GACJC,EAAM,EAAGA,EAAMH,EAAMG,IAC1BD,EAAKE,KAAK,CACVH,MACAE,QAGJJ,EAAKK,KAAKF,GAEd,OAAOH,EDqBDM,CAAW,IACjBC,MAAO,CACHL,IAAKM,KAAKC,MAAsB,GAAhBD,KAAKE,UACrBN,IAAKI,KAAKC,MAAsB,GAAhBD,KAAKE,WAEzBC,MAAO,CACHC,KAAM,CACFV,IAAK,EACLE,IAAK,GAETS,SAAU,CACNnB,EAAG,EACHC,EAAG,GAEPmB,KAAM,CACF,CACIZ,IAAK,EACLE,IAAK,GAET,CACIF,IAAK,EACLE,IAAK,KAKjBW,UAAU,GE1CRC,oNAEFC,kBAAoB,WAChBC,EAAKC,WAGTA,MAAQ,WACJD,EAAKE,MAAMC,MAAM,CACbC,MAAOvB,IAEXwB,SAASC,iBAAiB,UAAW,SAACC,GAClCP,EAAKQ,UAAUD,KAEnBE,WAAW,WACPT,EAAKU,YACNpC,MAGPoC,SAAW,WAEP,IAAIV,EAAKE,MAAML,SAAf,CAFY,IAAAc,EAMWX,EAAKE,MAArBT,EANKkB,EAMLlB,MAAOJ,EANFsB,EAMEtB,MACRuB,EAAQZ,EAAKa,iBACbC,EAAU,CACZ9B,IAAKS,EAAMC,KAAKV,IAAMS,EAAME,SAASlB,EACrCS,IAAKO,EAAMC,KAAKR,IAAMO,EAAME,SAASnB,GAErCuC,EAAO,CAAItB,EAAMC,MAAVsB,OAAAC,OAAAC,EAAA,EAAAD,CAAmBxB,EAAMG,OAChCuB,EAAW9B,EACZuB,GACCO,EAAWnB,EAAKoB,iBAChBpB,EAAKE,MAAMmB,YAAY,CACnBF,cAGJJ,EAAQO,MAIZtB,EAAKE,MAAMqB,gBAAgB,CACvBT,YAEJd,EAAKE,MAAMsB,gBAAgB,CACvBT,YAIAf,EAAKyB,aAAezB,EAAK0B,OAAO1B,EAAKE,MAAMT,MAAMC,MACjDM,EAAKE,MAAMyB,YAAY,CACnBC,MAAM,IAKdnB,WAAW,WACPT,EAAKU,YACNpC,OAGP8C,eAAiB,WAAK,IACVtC,EAASkB,EAAKE,MAAdpB,KACF+C,EAAa,GAQnB,OAPA/C,EAAKgD,QAAQ,SAAC9C,GACVA,EAAI8C,QAAQ,SAACC,GACL/B,EAAK0B,OAAOK,IAAU/B,EAAKgC,OAAOD,IAClCF,EAAW1C,KAAK4C,OAIrBF,EAAWvC,KAAKC,MAAMD,KAAKE,SAASqC,EAAWI,YAG1DpB,eAAiB,WAAM,IAAAqB,EACMlC,EAAKE,MAAtBb,EADW6C,EACX7C,MAAOI,EADIyC,EACJzC,MACf,OAAOJ,EAAML,MAAQS,EAAMC,KAAKV,KACzBK,EAAMH,MAAQO,EAAMC,KAAKR,OAGpCuC,UAAY,WAAM,IACNhC,EAAUO,EAAKE,MAAfT,MACR,GAAIA,EAAMC,KAAKR,IAAM,IACdO,EAAMC,KAAKR,IAAM,GACjBO,EAAMC,KAAKV,IAAM,IACjBS,EAAMC,KAAKV,IAAM,EACpB,OAAO,KAIfgD,OAAS,SAACD,GAAS,IACPtC,EAAUO,EAAKE,MAAfT,MACR,OAAOA,EAAMC,KAAKV,MAAQ+C,EAAK/C,KACxBS,EAAMC,KAAKR,MAAQ6C,EAAK7C,OAGnCiD,QAAU,SAACJ,GAAQ,IACR1C,EAASW,EAAKE,MAAdb,MACP,OAAOA,EAAML,MAAQ+C,EAAK/C,KACnBK,EAAMH,MAAQ6C,EAAK7C,OAG9BwC,OAAS,SAACK,GAEN,OADe/B,EAAKE,MAAMT,MAAnBG,KACKwC,KAAK,SAACC,GACd,OAAOA,EAAOrD,MAAQ+C,EAAK/C,KAAOqD,EAAOnD,MAAQ6C,EAAK7C,SAI9DsB,UAAY,SAAC8B,GACT,OAAOA,EAAMC,SACT,KAAKpE,EAID,YAHA6B,EAAKE,MAAMsC,oBAAoB,CAC3BC,YAAalE,IAGrB,KAAKL,EAID,YAHA8B,EAAKE,MAAMsC,oBAAoB,CAC3BC,YAAa9D,IAGrB,KAAKN,EAID,YAHA2B,EAAKE,MAAMsC,oBAAoB,CAC3BC,YAAa/D,IAGrB,KAAKN,EAID,YAHA4B,EAAKE,MAAMsC,oBAAoB,CAC3BC,YAAa7D,IAGrB,QACI,WAIZ8D,WAAa,WAAK,IAAAC,EACU3C,EAAKE,MAArBpB,EADM6D,EACN7D,KAAMW,EADAkD,EACAlD,MACd,OACImD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,oBAAYrD,EAAMG,KAAKqC,OAAO,GAC9BW,EAAAC,EAAAC,cAAA,WAASC,UAAU,QAEfjE,EAAKkE,IAAI,SAAChE,GAAD,OACLA,EAAIgE,IAAI,SAAAjB,GAAI,OACZa,EAAAC,EAAAC,cAAA,OAAKG,IAAG,GAAAjC,OAAKe,EAAK/C,IAAV,KAAAgC,OAAiBe,EAAK7C,KAC1B6D,UAAS,QAAA/B,OAAUhB,EAAKgC,OAAOD,GAC7B,OAAS/B,EAAKmC,QAAQJ,GACtB,QAAU/B,EAAK0B,OAAOK,GACtB,OAAS,eAWnCmB,eAAiB,WACb,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,kBAAyC/C,EAAKE,MAAMT,MAAMG,KAAKqC,OAAO,GACtEW,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBI,QAASnD,EAAKC,OAAlD,sFASZ,OACA2C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACTK,KAAKlD,MAAML,SAAUuD,KAAKF,iBAAmBE,KAAKV,qBAlL9CW,cAiMHC,cATS,SAAClD,GACrB,MAAM,CACFtB,KAAMsB,EAAMmD,KAAKzE,KACjBO,MAAOe,EAAMmD,KAAKlE,MAClBI,MAAOW,EAAMmD,KAAK9D,MAClBI,SAAUO,EAAMmD,KAAK1D,WAKR,CACbM,MC3Ma,SAACC,GAClB,MAAO,CACHoD,KHVa,QGWbC,QAASrD,IDyMTiB,YC7LmB,SAAChC,GACxB,MAAO,CACHmE,KHxBoB,eGyBpBC,QAASpE,ID2LTsC,YCtMmB,SAACC,GACxB,MAAO,CACH4B,KHZiB,YGajBC,QAAS7B,IDoMTJ,gBCnLuB,SAAC5B,GAC5B,MAAO,CACH4D,KHlCmB,cGmCnBC,QAAS7D,IDiLT2B,gBC1LuB,SAAC7B,GAC5B,MAAO,CACH8D,KH7BmB,cG8BnBC,QAAS/D,IDwLT8C,oBC/K2B,SAAC7C,GAChC,MAAO,CACH6D,KHvCuB,kBGwCvBC,QAAS9D,KDqKF2D,CASTxD,UExNS4D,cAAgB,CAC3BH,KCKW,WAAkC,IAAjCnD,EAAiCuD,UAAA1B,OAAA,QAAA2B,IAAAD,UAAA,GAAAA,UAAA,GAAzB9E,EAAegF,EAAUF,UAAA1B,OAAA,EAAA0B,UAAA,QAAAC,EAC7C,OAAOC,EAAOL,MACV,ILVa,QKWT,OAAOvC,OAAA6C,EAAA,EAAA7C,CAAA,GAAI4C,EAAOJ,QAAQrD,OAC9B,ILPiB,YKQb,OAAOa,OAAA6C,EAAA,EAAA7C,CAAA,GAAIb,EAAX,CAAkBP,SAAUgE,EAAOJ,QAAQ7B,OAC/C,ILboB,eKchB,OAAOX,OAAA6C,EAAA,EAAA7C,CAAA,GAAIb,EAAX,CAAkBf,MAAOwE,EAAOJ,QAAQtC,WAC5C,ILdmB,cKef,OAAOF,OAAA6C,EAAA,EAAA7C,CAAA,GAAIb,EAAX,CAAkBX,MAAMwB,OAAA6C,EAAA,EAAA7C,CAAA,GAAKb,EAAMX,MAAZ,CAAmBC,KAAMmE,EAAOJ,QAAQ3C,YACnE,ILfmB,cKgBf,OAAOG,OAAA6C,EAAA,EAAA7C,CAAA,GAAIb,EAAX,CAAkBX,MAAMwB,OAAA6C,EAAA,EAAA7C,CAAA,GAAKb,EAAMX,MAAZ,CAAmBG,KAAMiE,EAAOJ,QAAQ1C,YACnE,ILhBuB,kBKiBnB,OAAOE,OAAA6C,EAAA,EAAA7C,CAAA,GAAIb,EAAX,CAAkBX,MAAMwB,OAAA6C,EAAA,EAAA7C,CAAA,GAAKb,EAAMX,MAAZ,CAAmBE,SAAUkE,EAAOJ,QAAQhB,gBACvE,QACI,OAAOrC,MCfb2D,EAAmBC,OAAOC,sCAAwCC,IAElEC,EAAQC,YAAYC,EAAUN,EAAiBO,YAAgBC,OAErEC,IAASC,OACT7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAUP,MAAOA,GACbvB,EAAAC,EAAAC,cAAC6B,EAAD,OACStE,SAASuE,eAAe","file":"static/js/main.ff23b882.chunk.js","sourcesContent":["import { createGrid } from '../helpers'\r\n\r\nexport const RESET = 'RESET'\r\nexport const CREATE_APPLE = 'CREATE_APPLE'\r\nexport const UPDATE_HEAD = 'UPDATE_HEAD'\r\nexport const UPDATE_TAIL = 'UPDATE_TAIL'\r\nexport const UPDATE_VELOCITY = 'UPDATE_VELOCITY'\r\nexport const GAME_OVER = 'GAME_OVER'\r\n\r\nexport const KEY_LEFT = 37\r\nexport const KEY_UP = 38\r\nexport const KEY_RIGHT = 39\r\nexport const KEY_DOWN = 40\r\n\r\nexport const GAME_SPEED = 200\r\n\r\nexport const UP = {\r\n    x: 0,\r\n    y: -1,\r\n}\r\nexport const DOWN = {\r\n    x: 0,\r\n    y: 1,\r\n}\r\nexport const LEFT = {\r\n    x: -1,\r\n    y: 0,\r\n}\r\nexport const RIGHT = {\r\n    x: 1,\r\n    y: 0,\r\n}\r\n\r\nexport const INITIAL_STATE = {\r\n    grid: createGrid(20),\r\n    apple: {\r\n        row: Math.floor(Math.random() * 20),\r\n        col: Math.floor(Math.random() * 20),\r\n    },\r\n    snake: {\r\n        head: {\r\n            row: 9,\r\n            col: 9\r\n        },\r\n        velocity: {\r\n            x: 1,\r\n            y: 0\r\n        },\r\n        tail: [\r\n            {\r\n                row: 9,\r\n                col: 8\r\n            },            \r\n            {\r\n                row: 9,\r\n                col: 7\r\n            }\r\n        ],\r\n    },\r\n    \r\n    gameOver: false\r\n}","export const createGrid = (size) =>{\r\n    const grid = []\r\n\r\n    for (let row = 0; row < size; row++) {\r\n        const cols = [];\r\n        for (let col = 0; col < size; col++) {\r\n            cols.push({\r\n            row,\r\n            col\r\n            });\r\n        }\r\n        grid.push(cols);\r\n    }\r\n    return grid\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    reset, \r\n    setGameOver,\r\n    createApple,\r\n    updateSnakeTail, \r\n    updateSnakeHead, \r\n    updateSnakeVelocity} from '../actions'\r\nimport {\r\n    GAME_SPEED,\r\n    INITIAL_STATE,\r\n    UP, DOWN, LEFT, RIGHT, \r\n    KEY_DOWN, KEY_LEFT, KEY_RIGHT, KEY_UP} from '../actions/types';\r\n\r\nimport './style.css'\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount = () =>{     \r\n        this.start()\r\n    }\r\n\r\n    start = () =>{\r\n        this.props.reset({\r\n            state: INITIAL_STATE\r\n        })\r\n        document.addEventListener('keydown', (e) => {\r\n            this.moveSnake(e)\r\n        });\r\n        setTimeout(() => {\r\n            this.gameLoop()\r\n        }, GAME_SPEED)\r\n    }\r\n\r\n    gameLoop = () =>{\r\n        //if game is over exit game loop\r\n        if (this.props.gameOver) \r\n            return;\r\n        \r\n        //extracting data from props to change state\r\n        const {snake, apple} = this.props\r\n        const isEat = this.snakeEatsApple()\r\n        const newHead = {\r\n            row: snake.head.row + snake.velocity.y,\r\n            col: snake.head.col + snake.velocity.x\r\n        }        \r\n        let newTail = [snake.head, ...snake.tail]\r\n        let newApple = apple\r\n        if(isEat){\r\n            newApple = this.getRandomApple()\r\n            this.props.createApple({\r\n                newApple\r\n            })\r\n        }else{\r\n            newTail.pop()\r\n        }\r\n        \r\n        //updating redux state\r\n        this.props.updateSnakeHead({\r\n            newHead\r\n        })\r\n        this.props.updateSnakeTail({\r\n            newTail\r\n        })\r\n\r\n        //game over condition\r\n        if (this.isOffEdge() || this.isTail(this.props.snake.head)) {\r\n            this.props.setGameOver({\r\n                flag: true\r\n            })\r\n            return\r\n        }\r\n        //restart loop after defined time\r\n        setTimeout(() => {\r\n            this.gameLoop()\r\n        }, GAME_SPEED)\r\n    }\r\n\r\n    getRandomApple = () =>{\r\n        const { grid } = this.props;\r\n        const emptyCells = []\r\n        grid.forEach((row) =>{\r\n            row.forEach((cell) =>{\r\n                if(!this.isTail(cell) || !this.isHead(cell)){\r\n                    emptyCells.push(cell)\r\n                }\r\n            })\r\n        })\r\n        return emptyCells[Math.floor(Math.random()*emptyCells.length)]\r\n    }\r\n\r\n    snakeEatsApple = () => {\r\n        const { apple, snake } = this.props;\r\n        return apple.row === snake.head.row\r\n            && apple.col === snake.head.col;\r\n    }\r\n\r\n    isOffEdge = () => {\r\n        const { snake } = this.props;    \r\n        if (snake.head.col > 19\r\n            || snake.head.col < 0\r\n            || snake.head.row > 19\r\n            || snake.head.row < 0) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    isHead = (cell) => {\r\n        const { snake } = this.props;\r\n        return snake.head.row === cell.row\r\n            && snake.head.col === cell.col;\r\n    }\r\n\r\n    isApple = (cell) =>{\r\n        const {apple} = this.props\r\n        return apple.row === cell.row\r\n            && apple.col === cell.col;\r\n    }\r\n\r\n    isTail = (cell) =>{        \r\n        const {tail} = this.props.snake\r\n        return tail.find((inTail) => {\r\n            return inTail.row === cell.row && inTail.col === cell.col\r\n        })\r\n    }\r\n\r\n    moveSnake = (event) => {\r\n        switch(event.keyCode){\r\n            case KEY_UP:\r\n                this.props.updateSnakeVelocity({                    \r\n                    newVelocity: UP\r\n                })\r\n                return\r\n            case KEY_LEFT:\r\n                this.props.updateSnakeVelocity({                    \r\n                    newVelocity: LEFT\r\n                })\r\n                return\r\n            case KEY_DOWN:\r\n                this.props.updateSnakeVelocity({                    \r\n                    newVelocity: DOWN\r\n                })\r\n                return\r\n            case KEY_RIGHT:\r\n                this.props.updateSnakeVelocity({                    \r\n                    newVelocity: RIGHT\r\n                })\r\n                return\r\n            default:\r\n                return\r\n        }\r\n    }\r\n    \r\n    renderGrid = () =>{        \r\n        const { grid, snake } = this.props;\r\n        return(\r\n            <div className=\"center\">\r\n                <h2>Score: {snake.tail.length-2}</h2>\r\n                <section className=\"grid\">\r\n                {\r\n                    grid.map((row) => (\r\n                        row.map(cell => (\r\n                        <div key={`${cell.row} ${cell.col}`} \r\n                            className={`cell ${this.isHead(cell)\r\n                            ? 'head' : this.isApple(cell)\r\n                            ? 'apple' : this.isTail(cell)\r\n                            ? 'tail' : ''}`\r\n                            }>\r\n                        </div>\r\n                        ))\r\n                    ))\r\n                }\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderGameOver = () =>{\r\n        return(\r\n            <div className=\"card text-center\">\r\n                <div className=\"card-body\">\r\n                    <h1 className=\"card-title\">Game Over!!</h1>\r\n                    <p className=\"card-text\">Your Score is: {this.props.snake.tail.length-2}</p>\r\n                    <button className=\"btn btn-primary\" onClick={this.start}>\r\n                        Restart\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"App\">\r\n            { this.props.gameOver? this.renderGameOver() : this.renderGrid()}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        grid: state.game.grid,\r\n        apple: state.game.apple,\r\n        snake: state.game.snake,\r\n        gameOver: state.game.gameOver\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps, {\r\n        reset,\r\n        createApple,\r\n        setGameOver,\r\n        updateSnakeTail, \r\n        updateSnakeHead, \r\n        updateSnakeVelocity\r\n    }\r\n    )(App);","\r\nimport {\r\n    UPDATE_HEAD,\r\n    UPDATE_TAIL,\r\n    UPDATE_VELOCITY,\r\n    CREATE_APPLE,\r\n    RESET,\r\n    GAME_OVER\r\n} from './types'\r\n\r\nexport const reset = (state) => {\r\n    return({\r\n        type: RESET,\r\n        payload: state\r\n    })\r\n}\r\n\r\nexport const setGameOver = (flag) => {\r\n    return({\r\n        type: GAME_OVER,\r\n        payload: flag\r\n\r\n    })\r\n}\r\n\r\nexport const createApple = (apple) =>{\r\n    return({\r\n        type: CREATE_APPLE,\r\n        payload: apple\r\n    })\r\n}\r\nexport const updateSnakeHead = (head) =>{\r\n    return({\r\n        type: UPDATE_HEAD,\r\n        payload: head\r\n    })\r\n}\r\nexport const updateSnakeTail = (tail) =>{\r\n    return({\r\n        type: UPDATE_TAIL,\r\n        payload: tail\r\n    })\r\n}\r\nexport const updateSnakeVelocity = (velocity) =>{\r\n    return({\r\n        type: UPDATE_VELOCITY,\r\n        payload: velocity\r\n    })\r\n}\r\n\r\n","import { combineReducers } from 'redux';\r\n\r\nimport gameReducer from './gameReducer';\r\n\r\nexport default combineReducers({\r\n    game: gameReducer\r\n})\r\n","import {\r\n    RESET,\r\n    GAME_OVER,\r\n    UPDATE_TAIL,\r\n    UPDATE_HEAD,\r\n    CREATE_APPLE,\r\n    INITIAL_STATE,\r\n    UPDATE_VELOCITY\r\n} from '../actions/types'\r\n\r\nexport default (state = INITIAL_STATE, action) =>{\r\n    switch(action.type){\r\n        case RESET:\r\n            return {...action.payload.state}\r\n        case GAME_OVER:\r\n            return {...state, gameOver: action.payload.flag}\r\n        case CREATE_APPLE:\r\n            return {...state, apple: action.payload.newApple}\r\n        case UPDATE_HEAD:\r\n            return {...state, snake: {...state.snake, head: action.payload.newHead}}\r\n        case UPDATE_TAIL:\r\n            return {...state, snake: {...state.snake, tail: action.payload.newTail}}\r\n        case UPDATE_VELOCITY:\r\n            return {...state, snake: {...state.snake, velocity: action.payload.newVelocity}}\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reduxThunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware , compose } from 'redux';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(reduxThunk)));\n\nReactDOM.render(\n<Provider store={store}>\n    <App/>\n</Provider>, document.getElementById('root'));"],"sourceRoot":""}